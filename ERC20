pragma solidity 0.4.24;

library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns(uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns(uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns(uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns(uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract ERC20 {
    function totalSupply()public view returns(uint total_Supply);
    function balanceOf(address who)public view returns(uint256);
    function allowance(address owner, address spender)public view returns(uint);
    function transferFrom(address from, address to, uint value)public returns(bool ok);
    function approve(address spender, uint value)public returns(bool ok);
    function transfer(address to, uint value)public returns(bool ok);
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}


contract TTDtoken is ERC20
{
    using SafeMath for uint256;
        // Name of the token
    string public constant name = "TTD";

    // Symbol of token
    string public constant symbol = "TTD";
    uint8 public constant decimals = 3;
     uint256 constant public TOKEN_DECIMALS = 10 ** 3;
    uint256 constant public ETH_DECIMALS = 10 ** 18;
    uint public _totalsupply = 100000000 * TOKEN_DECIMALS; // 100 Million TDD Coins
    uint public reserveSupply = 30000000 * TOKEN_DECIMALS; //30 MillionTDD coins
    address public owner;
    uint256 public _price_tokn = 500;  //0.5 USD zero added for decimal conversion
    uint256 no_of_tokens;
    bool stopped = false;
    uint256 public earlybird_startdate;
    uint256 public earlybird_enddate;
    uint256 public ico_startdate;
    uint256 public ico_enddate;
    uint256 public preico_startdate;
    uint256 public preico_enddate;
    
    
    bool public lockstatus; 
  
    mapping(address => uint) balances;
    mapping(address => mapping(address => uint)) allowed;
    address public ethFundMain = 0xBe80a978364649422708470c979435f43e027209; // address to receive ether from smart contract
    address reserve = 0xBe80a978364649422708470c979435f43e027209;
    uint256 public ethreceived;
    uint public priceFactor;
     uint256 public ContributionAmount;
    
    
    uint256 currentPhase;
	uint256 upcomingPhase;

    enum Stages {
        NOTSTARTED,
        EARLYBIRD,
        PREICO,
        ICO,
        ENDED
    }
    Stages public stage;

    modifier atStage(Stages _stage) {
        require (stage == _stage);
        _;
    }

    modifier onlyOwner(){
        require (msg.sender == owner);
     _;
    }

  
    constructor (uint256 EtherPriceFactor) public
    {
        require(EtherPriceFactor != 0);
        owner = msg.sender;
        balances[owner] = 20000000 * TOKEN_DECIMALS;  // 20 Million given to owner ( 5% + 15%)
        stage = Stages.NOTSTARTED;
        lockstatus = true;
        priceFactor = EtherPriceFactor;
        emit Transfer(0, owner, balances[owner]);
    }

  
    /**
     * @dev fallback function ***DO NOT OVERRIDE***
     * Note that other contracts will transfer fund with a base gas stipend
     * of 2300, which is not enough to call buyTokens. Consider calling
     * buyTokens directly when purchasing tokens from a contract.
     */
    function () external payable {
        require(stage != Stages.ENDED);	
        require(!stopped && msg.sender != owner);
        buyTokens(msg.sender);
    }
    
     function buyTokens(address beneficiary) public payable {
        uint256 weiAmount = msg.value;
        _preValidatePurchase(beneficiary, weiAmount);

        ContributionAmount= ((msg.value).mul(priceFactor.mul(1000)));
        no_of_tokens =(((ContributionAmount).div(_price_tokn))).div(10 ** 15);
        ethreceived = ethreceived.add(weiAmount);
        balances[address(this)] = (balances[address(this)]).sub(no_of_tokens);
        balances[msg.sender] = balances[msg.sender].add(no_of_tokens);
        emit Transfer(address(this), msg.sender, no_of_tokens);
    }
    
    
    // -----------------------------------------
    // Internal interface (extensible)
    // -----------------------------------------

    /**
     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.
     * Example from CappedCrowdsale.sol's _preValidatePurchase method:
     *     super._preValidatePurchase(beneficiary, weiAmount);
     *     require(weiRaised().add(weiAmount) <= cap);
     * @param beneficiary Address performing the token purchase
     * @param weiAmount Value in wei involved in the purchase
     */
    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal pure  {
        require(beneficiary != address(0));
        require(weiAmount != 0);
    }
  
   
    // called by the owner, pause ICO
    function StopICO() external onlyOwner  {
        stopped = true;

    }

    // called by the owner , resumes ICO
    function releaseICO() external onlyOwner
    {
        stopped = false;

    }
    
    // to change price of Ether in USD, in case price increases or decreases
     function setpricefactor(uint256 newPricefactor) external onlyOwner
    {
        priceFactor = newPricefactor;
        
    }
    
     function setEthmainAddress(address newEthfundaddress) external onlyOwner
    {
        ethFundMain = newEthfundaddress;
    }
    
     function start_EARLYBIRD() external onlyOwner atStage(Stages.NOTSTARTED)
      {
        stage = Stages.EARLYBIRD;
        stopped = false;
        _price_tokn = 250;     //50 % dicount i.e 0.25 USD per TTD
        balances[address(this)] = 8000000 * 10 ** 3 ; //8 million TTD tokens
        earlybird_startdate = now;
        earlybird_enddate = now + 14 days; //time for ICO
        emit Transfer(0, address(this), balances[address(this)]);
        }
    
    
     function start_PREICO() external onlyOwner atStage(Stages.EARLYBIRD)
      {
        stage = Stages.PREICO;
        stopped = false;
        _price_tokn = 375;    //25 % dicount i.e 0.375 USD per TTD
        balances[address(this)] =balances[address(this)].add(21000000 * 10 ** 3); //21 million TTD in preICO
        preico_startdate = now;
        preico_enddate = now + 14 days; //time for preICO
        emit Transfer(0, address(this), 21000000 * 10 ** 3);
          }
    
    function start_ICO() external onlyOwner atStage(Stages.PREICO)
      {
        stage = Stages.ICO;
        stopped = false;
        _price_tokn = 500;   //0 % dicount 0.5 USD per TTD
        balances[address(this)] =balances[address(this)].add(21000000 * 10 ** 3); //21 million TTD in ICO
        ico_startdate = now;
        ico_enddate = now + 14 days; //time for ICO
        emit Transfer(0, address(this), 21000000 * 10 ** 3);
          }

    function end_ICO() external onlyOwner atStage(Stages.ICO)
    {
        require(now > ico_enddate);
        stage = Stages.ENDED;
        uint256 ownbal = balances[address(this)];
        balances[owner] = (balances[owner]).add( balances[address(this)]);
        balances[address(this)] = 0;
        emit Transfer(address(this), owner , ownbal);
        
    }
    
   
    // function to remove locking period after 3 weeks of end ico, can be called only be owner
    function removeLocking(bool RunningStatusLock) external onlyOwner
    {
        lockstatus = RunningStatusLock;
    }

    
    // what is the total supply of the ech tokens
    function totalSupply() public view returns(uint256 total_Supply) {
        total_Supply = _totalsupply;
    }

    // What is the balance of a particular account?
    function balanceOf(address _owner)public view returns(uint256 balance) {
        return balances[_owner];
    }

    // Send _value amount of tokens from address _from to address _to
    // The transferFrom method is used for a withdraw workflow, allowing contracts to send
    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge
    // fees in sub-currencies; the command should fail unless the _from account has
    // deliberately authorized the sender of the message via some mechanism; we propose
    // these standardized APIs for approval:
    function transferFrom(address _from, address _to, uint256 _amount)public returns(bool success) {
        require(_to != 0x0);
        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);
        balances[_from] = (balances[_from]).sub(_amount);
        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);
        balances[_to] = (balances[_to]).add(_amount);
        emit Transfer(_from, _to, _amount);
        return true;
    }

    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.
    // If this function is called again it overwrites the current allowance with _value.
    function approve(address _spender, uint256 _amount)public returns(bool success) {
        require(_spender != 0x0);
        require(!lockstatus);
        allowed[msg.sender][_spender] = _amount;
        emit Approval(msg.sender, _spender, _amount);
        return true;
    }

    function allowance(address _owner, address _spender)public view returns(uint256 remaining) {
        require(_owner != 0x0 && _spender != 0x0);
        return allowed[_owner][_spender];
    }
    // Transfer the balance from owner's account to another account
    function transfer(address _to, uint256 _amount) public returns(bool success) {
       
       if ( lockstatus && msg.sender == owner) {
            require(balances[owner] >= _amount && _amount >= 0);
            balances[owner] = balances[owner].sub(_amount);
            balances[_to] += _amount;
            emit Transfer(msg.sender, _to, _amount);
            return true;
        }
        
          else if(!lockstatus)
         {
           require(balances[msg.sender] >= _amount && _amount >= 0);
           balances[msg.sender] = (balances[msg.sender]).sub(_amount);
           balances[_to] = (balances[_to]).add(_amount);
           emit Transfer(msg.sender, _to, _amount);
           return true;
          }

        else{
            revert();
        }
    }


    //In case the ownership needs to be transferred
	function transferOwnership(address newOwner)public onlyOwner
	{
	    require( newOwner != 0x0);
	    balances[newOwner] = (balances[newOwner]).add(balances[owner]);
	    balances[owner] = 0;
	    owner = newOwner;
	    emit Transfer(msg.sender, newOwner, balances[newOwner]);
	}
	
	
	//this function is executed to transfer 2.5 percent 
	//of reserve pool tokens every six months
	function reservePoolTransfer(address _to) external onlyOwner atStage(Stages.ENDED) 
	returns(bool success){
	  
	  uint256 time = 15552000;  //6 months time in secs
	  currentPhase = (now.sub(ico_enddate)).div(time);
	    
	  require(currentPhase == upcomingPhase);
	  upcomingPhase = currentPhase.add (1);
	  uint256 _amount = 750000 * 10 **3; // 2.5% of 30 Million tokens
	 //balances[msg.sender] = (balances[msg.sender]).sub(_amount);
	 reserveSupply = reserveSupply.sub(_amount);
     balances[_to] = (balances[_to]).add(_amount);
     emit Transfer(0, _to, _amount);
     return true;
	  
	}


    function drain() external onlyOwner {
        address myAddress = this;
        ethFundMain.transfer(myAddress.balance);
    }

}
